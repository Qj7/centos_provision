#!/usr/bin/env powscript


run_command(command, message, hide_output, allow_errors, run_as, print_fail_message_method, output_log)
  debug "Evaluating command: ${command}"
  if empty $message
    run_command_message=$(print_with_color "$(translate 'messages.run_command')" 'blue')
    message="$run_command_message \`$command\`"
  else
    message=$(print_with_color "${message}" 'blue')
  if isset $hide_output
    echo -en "${message} . "
  else
    echo -e "${message}"
  if isset $PRESERVE_RUNNING
    print_command_status $command 'SKIPPED' 'yellow' $hide_output
    debug "Actual running disabled"
  else
    really_run_command "${command}" "${hide_output}" "${allow_errors}" "${run_as}" \
        "${print_fail_message_method}" "${output_log}"


print_command_status(command, status, color, hide_output)
  debug "Command result: ${status}"
  if isset $hide_output
    if $hide_output match (uncolored_yes_no)
      print_uncolored_yes_no $status
    else
      print_with_color $status $color


print_uncolored_yes_no(status)
  if $status == "NOK"
    echo "NO"
  else
    echo "YES"



really_run_command(command, hide_output, allow_errors, run_as, print_fail_message_method, output_log)
  local current_command_script=$(save_command_script "${command}" "${run_as}")
  local evaluated_command=$(command_run_as "${current_command_script}" "${run_as}")
  evaluated_command=$(unbuffer_streams "${evaluated_command}")
  evaluated_command=$(save_command_logs "${evaluated_command}" "${output_log}")
  evaluated_command=$(hide_command_output "${evaluated_command}" "${hide_output}")
  debug "Real command: ${evaluated_command}"
  if ! eval "${evaluated_command}"
    print_command_status "${command}" 'NOK' 'red' "${hide_output}"
    if isset $allow_errors
      remove_current_command $current_command_script
      return ${FAILURE_RESULT}
    else
      fail_message=$(print_current_command_fail_message $print_fail_message_method $current_command_script)
      remove_current_command $current_command_script
      fail "${fail_message}" "see_logs"
  else
    print_command_status $command 'OK' 'green' $hide_output
    remove_current_command $current_command_script


command_run_as(command, run_as)
  if isset $run_as
    echo "sudo -u '${run_as}' bash '${command}'"
  else
    echo "bash ${command}"


# unbuffer stdout to keep stderr/stdout lines ordering
unbuffer_streams(command)
  echo "stdbuf -i0 -o0 -e0 ${command}"


save_command_logs(evaluated_command, output_log)
  save_output_log="tee -i ${CURRENT_COMMAND_OUTPUT_LOG} | tee -ia ${SCRIPT_LOG}"
  save_error_log="tee -i ${CURRENT_COMMAND_ERROR_LOG} | tee -ia ${SCRIPT_LOG}"
  if isset "${output_log}"
    save_output_log="${save_output_log} | tee -ia ${output_log}"
    save_error_log="${save_error_log} | tee -ia ${output_log}"
  echo "((${evaluated_command}) 2> >(${save_error_log}) > >(${save_output_log}))"


remove_colors_from_file(file)
  debug "Removing colors from file ${file}"
  sed -r -e 's/\x1b\[([0-9]{1,3}(;[0-9]{1,3}){,2})?[mGK]//g' -i $file


hide_command_output(command, hide_output)
  if isset $hide_output
    echo "${command} > /dev/null"
  else
    echo "${command}"


save_command_script(command, run_as)
  local current_command_dir=$(mktemp -d)
  if isset $run_as
    chown $run_as $current_command_dir
  local current_command_script="${current_command_dir}/${CURRENT_COMMAND_SCRIPT_NAME}"
  echo '#!/usr/bin/env bash' > "${current_command_script}"
  echo 'set -o pipefail' >> "${current_command_script}"
  echo -e "${command}" >> "${current_command_script}"
  debug "$(print_content_of ${current_command_script})"
  echo "${current_command_script}"


print_current_command_fail_message(print_fail_message_method, current_command_script)
  remove_colors_from_file "${CURRENT_COMMAND_OUTPUT_LOG}"
  remove_colors_from_file "${CURRENT_COMMAND_ERROR_LOG}"
  if empty $print_fail_message_method
    print_fail_message_method="print_common_fail_message"
  local fail_message_header=$(translate 'errors.run_command.fail')
  local fail_message=$(eval $print_fail_message_method $current_command_script)
  echo -e "${fail_message_header}\n${fail_message}"


print_common_fail_message(current_command_script)
  print_content_of ${current_command_script}
  print_tail_content_of "${CURRENT_COMMAND_OUTPUT_LOG}"
  print_tail_content_of "${CURRENT_COMMAND_ERROR_LOG}"


print_tail_content_of(file)
  MAX_LINES_COUNT=20
  print_content_of "${file}" |  tail -n $MAX_LINES_COUNT


remove_current_command(current_command_script)
  debug "Removing current command script and logs"
  rm -f $CURRENT_COMMAND_OUTPUT_LOG $CURRENT_COMMAND_ERROR_LOG $current_command_script
  rmdir $(dirname $current_command_script)
