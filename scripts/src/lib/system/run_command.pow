#!/usr/bin/env powscript


run_command(command, message, hide_output, allow_errors, run_as)
  debug "Evaluating command: ${command}"
  if empty $message
    run_command_message=$(print_with_color "$(translate 'messages.run_command')" 'blue')
    message="$run_command_message \`$command\`"
  else
    message=$(print_with_color "${message}" 'blue')
  if isset $hide_output
    echo -en "${message} . "
  else
    echo -e "${message}"
  if isset $PRESERVE_RUNNING
    print_command_status $command 'SKIPPED' 'yellow' $hide_output
    debug "Actual running disabled"
  else
    really_run_command "${command}" "${hide_output}" "${allow_errors}" "${run_as}"


print_command_status(command, status, color, hide_output)
  debug "Command result: ${status}"
  if isset $hide_output
    print_with_color $status $color


really_run_command(command, hide_output, allow_errors, run_as)
  local evaluated_command=$(command_run_as "${command}" "${run_as}")
  evaluated_command=$(unbuffer_streams "${evaluated_command}")
  evaluated_command=$(break_pipe_on_fail "${evaluated_command}")
  evaluated_command=$(save_command_logs "${evaluated_command}" "${command}")
  evaluated_command=$(hide_command_output "${evaluated_command}" "${hide_output}")
  debug "Real command: ${evaluated_command}"
  if ! eval "${evaluated_command}"
    print_command_status $command 'NOK' 'red' $hide_output
    if isset $allow_errors
      return 1 # false
    else
      fail "$(translate 'errors.run_command.fail') \`$command\`" "see_logs"
  else
    print_command_status $command 'OK' 'green' $hide_output


command_run_as(command, run_as)
  if isset $run_as
    echo "sudo -u '${run_as}' bash -c '${command}'"
  else
    echo "${command}"


# unbuffer stdout to keep stderr/stdout lines ordering
unbuffer_streams(command)
  echo "stdbuf -i0 -o0 -e0 ${command}"


break_pipe_on_fail(command)
  echo "set -o pipefail && (${command})"


save_command_logs(evaluated_command, command)
  local output_log=$(command_output_log "${command}")
  local error_log=$(command_error_log "${command}")
  save_error_log="tee -i ${error_log} | tee -ia ${SCRIPT_LOG}"
  save_output_log="tee -i ${output_log} | tee -ia ${SCRIPT_LOG}"
  echo "((${evaluated_command}) 2> >(${save_error_log}) > >(${save_output_log}))"


hide_command_output(command, hide_output)
  if isset $hide_output
    echo "${command} > /dev/null"
  else
    echo "${command}"


command_output_log(command)
  echo command-$(command_hash "${command}")-stdout.log


command_error_log(command)
  echo command-$(command_hash "${command}")-stderr.log


command_hash(command)
  echo "${command}" | md5sum | cut -d' ' -f 1
