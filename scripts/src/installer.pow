#!/usr/bin/env powscript


require 'shared/vars/installer_program_name.pow'
require 'shared/vars/common.pow'
require 'shared/vars/dict.pow'

require 'lib/asserts/assert_caller_root.pow'
require 'lib/asserts/assert_installed.pow'
require 'lib/i18n/set_ui_lang.pow'
require 'lib/i18n/translate.pow'
require 'lib/io/add_indentation.pow'
require 'lib/io/detect_mime_type.pow'
require 'lib/io/get_user_var.pow'
require 'lib/io/force_utf8_input.pow'
require 'lib/io/hack_stdin.pow'
require 'lib/io/is_pipe_mode.pow'
require 'lib/io/print_prompt.pow'
require 'lib/io/print_prompt_error.pow'
require 'lib/io/print_prompt_help.pow'
require 'lib/io/read_stdin.pow'
require 'lib/install/install_package.pow'
require 'lib/install/is_installed.pow'
require 'lib/system/debug.pow'
require 'lib/system/fail.pow'
require 'lib/system/init.pow'
require 'lib/system/init_log.pow'
require 'lib/system/log_and_print_err.pow'
require 'lib/system/on_exit.pow'
require 'lib/system/print_content_of.pow'
require 'lib/system/print_err.pow'
require 'lib/system/print_translated.pow'
require 'lib/system/print_with_color.pow'
require 'lib/system/run_command.pow'
require 'lib/validation/get_error.pow'
require 'lib/validation/validate_domains_list.pow'
require 'lib/validation/validate_alnumdashdot.pow'
_require 'lib/validation/validate_ip.pow'
require 'lib/validation/validate_license_key.pow'
require 'lib/validation/validate_presence.pow'
require 'lib/validation/validate_file_existence.pow'
require 'lib/validation/validate_starts_with_latin_letter.pow'
require 'lib/yes_no/is_no.pow'
require 'lib/yes_no/is_yes.pow'
require 'lib/yes_no/transform_to_yes_no.pow'
require 'lib/yes_no/validate_yes_no.pow'

require 'app/installer/vars/common.pow'
require 'app/installer/vars/dict.pow'

require 'app/installer/lib/system/clean_up.pow'

require 'app/installer/stage1.pow'
require 'app/installer/stage1/parse_options.pow'
require 'app/installer/stage2.pow'
require 'app/installer/stage2/assert_pannels_not_installed.pow'
require 'app/installer/stage3.pow'
require 'app/installer/stage3/get_user_vars.pow'
require 'app/installer/stage3/read_inventory_file.pow'
require 'app/installer/stage3/setup_vars.pow'
require 'app/installer/stage3/write_inventory_file.pow'
require 'app/installer/stage4.pow'
require 'app/installer/stage5.pow'
require 'app/installer/stage5/download_provision.pow'
require 'app/installer/stage5/remove_inventory_file.pow'
require 'app/installer/stage5/remove_log_files.pow'
require 'app/installer/stage5/run_ansible_playbook.pow'
require 'app/installer/stage5/show_successful_message.pow'
_require 'app/installer/stage5/json2dict.sh'

write_emtpy_hosts_txt()
  echo -e "[server]\nlocalhost connection=local" > hosts.txt

# We wrap the entire script in a big function which we only call at the very end, in order to
# protect against the possibility of the connection dying mid-script. This protects us against
# the problem described in this blog post:
#   http://blog.existentialize.com/dont-pipe-to-your-shell.html
install()
  init $@
  stage1 $@                 # initial script setup
  stage2                    # make some asserts
  if ! $RECONFIGURE
    stage3                  # generate inventory file
  else
    write_emtpy_hosts_txt
  stage4                    # upgrade packages and install ansible
  stage5                    # run ansible playbook


install $@
