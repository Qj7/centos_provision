#!/usr/bin/env powscript

ANSIBLE_TASK_HEADER="^TASK \[(.*)\].*"
ANSIBLE_TASK_FAILURE_HEADER="^fatal: "
ANSIBLE_FAILURE_JSON_FILEPATH="ansible_failure.json"

run_ansible_playbook()
  local command="ANSIBLE_FORCE_COLOR=true ansible-playbook -vvv -i ${INVENTORY_FILE} ${PROVISION_DIRECTORY}/playbook.yml"
  if isset $ANSIBLE_TAGS
    command="${command} --tags ${ANSIBLE_TAGS}"
  if isset $ANSIBLE_IGNORE_TAGS
    command="${command} --skip-tags ${ANSIBLE_IGNORE_TAGS}"
  run_command "${command}" '' '' '' '' 'print_ansible_fail_message'


print_ansible_fail_message()
  echo "Fail when playing ansible playbook"
  if ansible_task_found $CURRENT_COMMAND_OUTPUT_LOG
    debug "Found last ansible task"
    print_tail_content_of $CURRENT_COMMAND_ERROR_LOG
    remove_text_before_last_pattern_occurence $ANSIBLE_TASK_HEADER $CURRENT_COMMAND_OUTPUT_LOG
    print_ansible_task_info $CURRENT_COMMAND_OUTPUT_LOG
    print_ansible_task_stdout_and_stderr $CURRENT_COMMAND_OUTPUT_LOG
  else
    print_common_fail_message

ansible_task_found(task_output_filepath)
  grep -qE $ANSIBLE_TASK_HEADER $task_output_filepath


print_ansible_task_info(task_output_filepath)
  echo "Task info:"
  head -n3 $task_output_filepath | add_indentation


print_ansible_task_stdout_and_stderr(task_output_filepath)
  if ansible_task_failure_found
    debug "Found last ansible failure"
    cp $task_output_filepath $ANSIBLE_FAILURE_JSON_FILEPATH
    keep_json_only $ANSIBLE_FAILURE_JSON_FILEPATH
    print_ansible_task_stdout_and_stderr_from_json $ANSIBLE_FAILURE_JSON_FILEPATH
    rm $ANSIBLE_FAILURE_JSON_FILEPATH


ansible_task_failure_found()
  grep -q $ANSIBLE_TASK_FAILURE_HEADER $CURRENT_COMMAND_OUTPUT_LOG


keep_json_only(task_output_with_json)
  # The json with error is inbuilt into text. The structure of text is about:
  #
  # TASK [$ROLE_NAME : $TASK_NAME] *******
  # task path: /path/to/task/file.yml:$LINE
  # .....
  # fatal: [localhost]: FAILED! => {
  #     .....
  #     failure JSON
  #     .....
  # }
  # .....
  #
  # So remove all before "fatal: [localhost]: FAILED! => {" line
  sed -n -i -r "/${ANSIBLE_TASK_FAILURE_HEADER}/,\$p" $task_output_with_json
  # Replace first line to just '{'
  sed -i '1c{' $task_output_with_json
  # Remove all after '}'
  sed -i -e '/^}$/q' $task_output_with_json


remove_text_before_last_pattern_occurence(pattern, file)
  sed -n -i -r "H;/${pattern}/h;\${g;p;}" $file


print_ansible_task_stdout_and_stderr_from_json(json_filepath)
  fail_json={}
  eval "fail_json=$(cat $ANSIBLE_FAILURE_JSON_FILEPATH | json2dict)"
  print_field_content 'Task stdout' "${fail_json['stdout']}"
  print_field_content 'Task stderr' "${fail_json['stderr']}"


print_field_content(field_name, field_content)
  if empty "${field_content}"
    echo "${field_name} is empty"
  else
    echo "${field_name}:"
    echo -e "${field_content}" | add_indentation


add_indentation()
  sed "s/^/  /g"
