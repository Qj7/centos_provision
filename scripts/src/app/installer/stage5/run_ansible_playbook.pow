#!/usr/bin/env powscript


ANSIBLE_TASK_HEADER="^TASK \[(.*)\].*"
ANSIBLE_TASK_FAILURE_HEADER="^fatal: "
ANSIBLE_FAILURE_JSON_FILEPATH="ansible_failure.json"

run_ansible_playbook()
  local command="ANSIBLE_FORCE_COLOR=true ansible-playbook -vvv -i ${INVENTORY_FILE} ${PROVISION_DIRECTORY}/playbook.yml"
  if isset $ANSIBLE_TAGS
    command="${command} --tags ${ANSIBLE_TAGS}"
  if isset $ANSIBLE_IGNORE_TAGS
    command="${command} --skip-tags ${ANSIBLE_IGNORE_TAGS}"
  run_command "${command}" '' '' '' '' 'print_ansible_fail_message'


print_ansible_fail_message()
  if ansible_task_found $CURRENT_COMMAND_OUTPUT_LOG
    debug "Found last ansible task"
    print_tail_content_of $CURRENT_COMMAND_ERROR_LOG
    # TODO Save only last task log in file
    remove_text_before_last_pattern_occurence $ANSIBLE_TASK_HEADER $CURRENT_COMMAND_OUTPUT_LOG
    print_ansible_task_info $CURRENT_COMMAND_OUTPUT_LOG
    print_ansible_task_external_info $CURRENT_COMMAND_OUTPUT_LOG
  else
    print_common_fail_message


ansible_task_found(task_output_filepath)
  grep -qE $ANSIBLE_TASK_HEADER $task_output_filepath


print_ansible_task_info(task_output_filepath)
  echo "Task info:"
  head -n3 $task_output_filepath | add_indentation


print_ansible_task_external_info(task_output_filepath)
  if ansible_task_failure_found
    debug "Found last ansible failure"
    cp $task_output_filepath $ANSIBLE_FAILURE_JSON_FILEPATH
    keep_json_only $ANSIBLE_FAILURE_JSON_FILEPATH
    print_ansible_task_module_info $ANSIBLE_FAILURE_JSON_FILEPATH
    rm $ANSIBLE_FAILURE_JSON_FILEPATH


ansible_task_failure_found()
  grep -q $ANSIBLE_TASK_FAILURE_HEADER $CURRENT_COMMAND_OUTPUT_LOG


keep_json_only(task_output_with_json)
  # The json with error is inbuilt into text. The structure of text is about:
  #
  # TASK [$ROLE_NAME : $TASK_NAME] *******
  # task path: /path/to/task/file.yml:$LINE
  # .....
  # fatal: [localhost]: FAILED! => {
  #     .....
  #     failure JSON
  #     .....
  # }
  # .....
  #
  # So remove all before "fatal: [localhost]: FAILED! => {" line
  sed -n -i -r "/${ANSIBLE_TASK_FAILURE_HEADER}/,\$p" $task_output_with_json
  # Replace first line to just '{'
  sed -i '1c{' $task_output_with_json
  # Remove all after '}'
  sed -i -e '/^}$/q' $task_output_with_json


remove_text_before_last_pattern_occurence(pattern, file)
  sed -n -i -r "H;/${pattern}/h;\${g;p;}" $file


print_ansible_task_module_info(json_filepath)
  json={}
  eval "json=$(cat $ANSIBLE_FAILURE_JSON_FILEPATH | json2dict)"
  ansible_module=$json['invocation.module_name']
  echo "Ansible module: ${json['invocation.module_name']}"
  if isset "${json['msg']}"
    print_field_content "Field 'msg'" "${json['msg']}"
  if need_print_stdout_stderr $ansible_module "${json['stdout']}" "${json['stderr']}"
    print_field_content "Field 'stdout'" "${json['stdout']}"
    print_field_content "Field 'stderr'" "${json['stderr']}"
  if need_print_full_json $ansible_module "${json['stdout']}" "${json['stderr']}" "${json['msg']}"
    print_content_of $ANSIBLE_FAILURE_JSON_FILEPATH


print_field_content(field_caption, field_content)
  if empty "${field_content}"
    echo "${field_caption} is empty"
  else
    echo "${field_caption}:"
    echo -e "${field_content}" | add_indentation


need_print_stdout_stderr(ansible_module, stdout, stderr)
  isset "${stdout}"
  local is_stdout_set=$?
  isset "${stderr}"
  local is_stderr_set=$?
  # [[ $ansible_module == 'cmd' || ${is_stdout_set} || ${is_stderr_set} ]]
  [[ $ansible_module == 'cmd' || ${is_stdout_set} == ${SUCCESS_RESULT} || ${is_stderr_set} == ${SUCCESS_RESULT} ]]


need_print_full_json(ansible_module, stdout, stderr, msg)
  need_print_stdout_stderr $ansible_module $stdout $stderr
  local need_print_output_fields=$?
  isset $msg
  is_msg_set=$?
  [[ ${need_print_output_fields} != ${SUCCESS_RESULT} && ${is_msg_set} != ${SUCCESS_RESULT}  ]]




get_printable_fields(ansible_module, fields)
  echo $fields

add_indentation()
  sed "s/^/  /g"
