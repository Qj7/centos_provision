#!/usr/bin/env powscript


get_user_vars()
  debug 'Read vars from user input'
  hack_stdin_if_pipe_mode
  print_translated "welcome"
  if ! can_install_firewall
    VARS['skip_firewall']=$(translate 'no')
    get_user_var 'skip_firewall' 'validate_yes_no'
    if is_no "${VARS['skip_firewall']}"
      fail "$(translate 'errors.cant_install_firewall')"
  get_user_ssl_vars
  get_user_var 'license_ip' 'validate_presence validate_ip'
  get_user_var 'license_key' 'validate_presence validate_license_key'
  get_user_var 'db_name' 'validate_presence validate_alnumdashdot validate_starts_with_latin_letter'
  get_user_var 'db_user' 'validate_presence validate_alnumdashdot validate_starts_with_latin_letter'
  get_user_var 'db_password' 'validate_presence validate_alnumdashdot'
  get_user_var 'db_restore' 'validate_presence validate_yes_no'
  if is_yes "${VARS['db_restore']}"
    get_user_var 'db_restore_path' 'validate_presence validate_file_existence'
    get_user_var 'db_restore_salt' 'validate_presence validate_alnumdashdot'
  else
    get_user_var 'admin_login' 'validate_presence validate_alnumdashdot validate_starts_with_latin_letter'
    get_user_var 'admin_password' 'validate_presence validate_alnumdashdot'


get_user_ssl_vars()
  VARS['ssl_certificate']='self-signed'
  get_user_var 'ssl' 'validate_yes_no'
  if is_yes ${VARS['ssl']}
    get_user_var 'ssl_agree_tos' 'validate_yes_no'
    if is_yes ${VARS['ssl_agree_tos']}
      VARS['ssl_certificate']='letsencrypt'
      get_user_var 'ssl_domains' 'validate_presence validate_domains_list'
      get_user_var 'ssl_email'


can_install_firewall()
  run_command 'iptables -t nat -L' "$(translate 'messages.check_ability_firewall_installing')" 'hide_output' 'allow_errors'
